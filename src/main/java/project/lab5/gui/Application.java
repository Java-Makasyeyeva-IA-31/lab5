/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package project.lab5.gui;

import java.awt.Font;
import java.awt.event.ItemEvent;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.TreeMap;
import java.util.function.Supplier;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import project.lab5.action.LocationActionsInformationFiller;
import project.lab5.data.LocalityType;
import project.lab5.data.Wrapper;

/**
 *
 * @author Phoenix
 */
public class Application extends javax.swing.JFrame {

    private final DefaultTableModel localityDTM;
    private final Map<Integer, Supplier<String>> informationSupliers;
    private final LocationActionsInformationFiller actionsInformationFiller;

    /**
     * Creates new form ApplicationJF
     */
    public Application() {
        initComponents();

        //set table functionality
        localityTable.getTableHeader().setFont(new Font(null, Font.PLAIN, 23));
        localityDTM = (DefaultTableModel) localityTable.getModel();
        localityTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        //fill type checkbox
        for (LocalityType type : LocalityType.values()) {
            localityTypeCB.addItem(type.getName());
        }
        localityTypeCB.setSelectedIndex(0);

        //init timer components
        informationSupliers = Collections.synchronizedMap(new TreeMap<>());
        actionsInformationFiller = new LocationActionsInformationFiller(
                informationSupliers, locationActionsInformationTA);

        //start timer
        new Timer(1000, (e) -> actionsInformationFiller.fill()).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        localityTable = new javax.swing.JTable();
        localityNameL = new javax.swing.JLabel();
        localityPopulationL = new javax.swing.JLabel();
        localityTypeCB = new javax.swing.JComboBox<>();
        localityTypeL = new javax.swing.JLabel();
        localityNameTF = new javax.swing.JTextField();
        localityPopulationTF = new javax.swing.JTextField();
        localityAddBbuttron = new javax.swing.JButton();
        localityDeleteButton = new javax.swing.JButton();
        localityUpdateButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        locationActionsInformationTA = new javax.swing.JTextArea();
        locationNameDuplicatesCB = new javax.swing.JCheckBox();
        locationInformationLable = new javax.swing.JLabel();
        locationEventLabel = new javax.swing.JLabel();
        locationEventInformationLabel = new javax.swing.JLabel();
        locationPopulationSumCB = new javax.swing.JCheckBox();
        locationOftenTypeCB = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        localityTable.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        localityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Population", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        localityTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                localityTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(localityTable);
        if (localityTable.getColumnModel().getColumnCount() > 0) {
            localityTable.getColumnModel().getColumn(0).setHeaderValue("Name");
            localityTable.getColumnModel().getColumn(1).setHeaderValue("Population");
            localityTable.getColumnModel().getColumn(2).setResizable(false);
            localityTable.getColumnModel().getColumn(2).setHeaderValue("Type");
        }

        localityNameL.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        localityNameL.setText("Name");

        localityPopulationL.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        localityPopulationL.setText("Population");

        localityTypeL.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        localityTypeL.setText("Type");

        localityPopulationTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                localityPopulationTFKeyTyped(evt);
            }
        });

        localityAddBbuttron.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        localityAddBbuttron.setText("ADD");
        localityAddBbuttron.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localityAddBbuttronActionPerformed(evt);
            }
        });

        localityDeleteButton.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        localityDeleteButton.setText("DELETE");
        localityDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localityDeleteButtonActionPerformed(evt);
            }
        });

        localityUpdateButton.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        localityUpdateButton.setText("UPDATE");
        localityUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localityUpdateButtonActionPerformed(evt);
            }
        });

        locationActionsInformationTA.setColumns(20);
        locationActionsInformationTA.setRows(5);
        jScrollPane2.setViewportView(locationActionsInformationTA);

        locationNameDuplicatesCB.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        locationNameDuplicatesCB.setText("Name Duplicates");
        locationNameDuplicatesCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                locationNameDuplicatesCBItemStateChanged(evt);
            }
        });

        locationInformationLable.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        locationInformationLable.setText("Entering");

        locationEventLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        locationEventLabel.setText("Event");

        locationEventInformationLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        locationEventInformationLabel.setText("Event Information");

        locationPopulationSumCB.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        locationPopulationSumCB.setText("Population sum");
        locationPopulationSumCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                locationPopulationSumCBItemStateChanged(evt);
            }
        });

        locationOftenTypeCB.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        locationOftenTypeCB.setText("Often type");
        locationOftenTypeCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                locationOftenTypeCBItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(locationInformationLable)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(localityPopulationL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(localityAddBbuttron, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(localityTypeL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(localityNameL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(localityDeleteButton)
                                    .addGap(27, 27, 27)
                                    .addComponent(localityUpdateButton))
                                .addComponent(localityNameTF)
                                .addComponent(localityTypeCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(localityPopulationTF))))
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(locationPopulationSumCB)
                    .addComponent(locationNameDuplicatesCB)
                    .addComponent(locationOftenTypeCB, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(locationEventLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                    .addComponent(locationEventInformationLabel))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(locationEventLabel)
                            .addComponent(locationInformationLable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(localityNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(localityNameL)
                            .addComponent(locationNameDuplicatesCB))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(localityPopulationL)
                            .addComponent(localityPopulationTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(locationPopulationSumCB))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(localityTypeL)
                            .addComponent(localityTypeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(locationOftenTypeCB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(localityAddBbuttron)
                            .addComponent(localityDeleteButton)
                            .addComponent(localityUpdateButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(locationEventInformationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void localityAddBbuttronActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localityAddBbuttronActionPerformed
        if (isLocalityValuesCorrect()) {
            Object[] localityValues = {localityNameTF.getText(), localityPopulationTF.getText(),
                localityTypeCB.getSelectedItem()};
            localityDTM.addRow(localityValues);
            JOptionPane.showMessageDialog(this, "Locality added saccessfully");

            setFieldsDefaultValues();
        }
    }//GEN-LAST:event_localityAddBbuttronActionPerformed

    private boolean isLocalityValuesCorrect() {
        if (localityNameTF.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please input correct name!");
            return false;
        } else if (isNotCorrectPopulation(localityPopulationTF.getText())) {
            JOptionPane.showMessageDialog(this, "Please input correct population!");
            return false;
        }
        return true;
    }

    private boolean isNotCorrectPopulation(String text) {
        try {
            return Integer.parseInt(text) < 0;
        } catch (NumberFormatException e) {
            return true;
        }
    }

    private void localityPopulationTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_localityPopulationTFKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_localityPopulationTFKeyTyped

    private void localityDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localityDeleteButtonActionPerformed
        if (localityTable.getSelectedRowCount() == 1) {
            localityDTM.removeRow(localityTable.getSelectedRow());
            localityTable.getSelectionModel().clearSelection();
            setFieldsDefaultValues();
        } else {
            showMessageOfEmptyTableOrUnselectedRow("delete");
        }
    }//GEN-LAST:event_localityDeleteButtonActionPerformed

    private void setFieldsDefaultValues() {
        localityNameTF.setText("");
        localityPopulationTF.setText("");
        localityTypeCB.setSelectedIndex(0);
    }

    private void localityUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localityUpdateButtonActionPerformed
        if (localityTable.getSelectedRowCount() == 1) {
            if (isLocalityValuesCorrect()) {
                localityDTM.setValueAt(localityNameTF.getText(), localityTable.getSelectedRow(), 0);
                localityDTM.setValueAt(localityPopulationTF.getText(), localityTable.getSelectedRow(), 1);
                localityDTM.setValueAt(localityTypeCB.getSelectedItem(), localityTable.getSelectedRow(), 2);
                JOptionPane.showMessageDialog(this, "Locality updated saccessfully");
            }
        } else {
            showMessageOfEmptyTableOrUnselectedRow("update");
        }
    }//GEN-LAST:event_localityUpdateButtonActionPerformed

    private void showMessageOfEmptyTableOrUnselectedRow(String action) {
        if (localityTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "There is no rows to " + action + "!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select one row for " + action + "!");
        }
    }

    private void localityTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_localityTableMouseClicked
        String name = localityTable.getValueAt(localityTable.getSelectedRow(), 0).toString();
        String population = localityTable.getValueAt(localityTable.getSelectedRow(), 1).toString();
        String type = localityTable.getValueAt(localityTable.getSelectedRow(), 2).toString();

        localityNameTF.setText(name);
        localityPopulationTF.setText(population);
        localityTypeCB.setSelectedItem(type);
    }//GEN-LAST:event_localityTableMouseClicked

    private void locationNameDuplicatesCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_locationNameDuplicatesCBItemStateChanged
        if (ItemEvent.SELECTED == evt.getStateChange()) {
            informationSupliers.put(0, () -> {
                Map<Object, Integer> duplicates = new HashMap<>();

                localityDTM.getDataVector().forEach(vector -> {
                    Object localityName = vector.get(0);
                    int localityNameCount = duplicates.getOrDefault(localityName, 0);
                    duplicates.put(localityName, ++localityNameCount);
                });

                int duplicateCount[] = {0};

                duplicates.values().forEach(count -> {
                    if (count > 1) {
                        duplicateCount[0] = ++duplicateCount[0];
                    }
                });

                return "Name duplicates: " + duplicateCount[0];
            });
        } else {
            informationSupliers.remove(0);
        }
    }//GEN-LAST:event_locationNameDuplicatesCBItemStateChanged

    private void locationPopulationSumCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_locationPopulationSumCBItemStateChanged
        if (ItemEvent.SELECTED == evt.getStateChange()) {
            informationSupliers.put(1, () -> {
                int sum[] = {0};

                localityDTM.getDataVector().forEach(vector -> {
                    int localityPopulation = Integer.parseInt((String) vector.get(1));
                    sum[0] += localityPopulation;
                });

                return "Population sum: " + sum[0];
            });
        } else {
            informationSupliers.remove(1);
        }
    }//GEN-LAST:event_locationPopulationSumCBItemStateChanged

    private void locationOftenTypeCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_locationOftenTypeCBItemStateChanged
        if (ItemEvent.SELECTED == evt.getStateChange()) {
            informationSupliers.put(2, () -> {
                Map<LocalityType, Integer> types = new HashMap<>();

                localityDTM.getDataVector().forEach(vector -> {
                    LocalityType localityType = LocalityType.getInstance((String) vector.get(2));

                    int localityTypeCount = types.getOrDefault(localityType, 0);
                    types.put(localityType, ++localityTypeCount);
                });

                if (types.isEmpty()) {
                    return "There is no most often locality type";
                } else {
                    Wrapper<Integer> localityMostOftenCount = new Wrapper<>(-1);
                    Wrapper<LocalityType> mostOftenLocalityType = new Wrapper<>();

                    types.entrySet().forEach(entry -> {
                        if (entry.getValue() > localityMostOftenCount.getValue()) {
                            localityMostOftenCount.setValue(entry.getValue());
                            mostOftenLocalityType.setValue(entry.getKey());
                        } else if (Objects.equals(entry.getValue(), localityMostOftenCount.getValue())) {
                            localityMostOftenCount.setValue(-1);
                        }
                    });

                    if (localityMostOftenCount.getValue() != -1) {
                        return "The most often locality type is " + mostOftenLocalityType.getValue() + ".";
                    }
                }

                return "There is no most often locality type.";
            });
        } else {
            informationSupliers.remove(2);
        }
    }//GEN-LAST:event_locationOftenTypeCBItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Application().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton localityAddBbuttron;
    private javax.swing.JButton localityDeleteButton;
    private javax.swing.JLabel localityNameL;
    private javax.swing.JTextField localityNameTF;
    private javax.swing.JLabel localityPopulationL;
    private javax.swing.JTextField localityPopulationTF;
    private javax.swing.JTable localityTable;
    private javax.swing.JComboBox<String> localityTypeCB;
    private javax.swing.JLabel localityTypeL;
    private javax.swing.JButton localityUpdateButton;
    private javax.swing.JTextArea locationActionsInformationTA;
    private javax.swing.JLabel locationEventInformationLabel;
    private javax.swing.JLabel locationEventLabel;
    private javax.swing.JLabel locationInformationLable;
    private javax.swing.JCheckBox locationNameDuplicatesCB;
    private javax.swing.JCheckBox locationOftenTypeCB;
    private javax.swing.JCheckBox locationPopulationSumCB;
    // End of variables declaration//GEN-END:variables
}
